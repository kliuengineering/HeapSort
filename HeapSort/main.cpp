//
//  main.cpp
//  HeapSort
//
//  Created by Kevin Liu on 2024-02-04.
//

#include <iostream>
#include <chrono>
#include <ctime>
#include <vector>
#include <iterator>


void Heapify(std::vector<int> &array, long int array_size, long int root)
{
    // initialize largest as root
    long int largest = root;
    
    // left = 2i+1
    long int left = 2*root + 1;
    
    // righ = 2i+2
    long int right = 2*root + 2;
    
    // if the left child is larger than the root
    if(left < array_size && array[left] > array[largest])
        largest = left;
    
    // if the right child is larger than largest so far
    if(right < array_size && array[right] > array[largest])
        largest = right;
    
    // if largest is not the root
    if(largest != root)
    {
        std::swap(array[root], array[largest]);
        
        // recursion to the affected sub-tree
        Heapify(array, array_size, largest);
    }
}


void HeapSort(std::vector<int> &array)
{
    long int array_size = array.size();
    
    // build a heap
    for(long int i = (array_size/2)-1; i >= 0; i--)
    {
        Heapify(array, array_size, i);
    }
    
    // extract elements from the heap, one by one
    for(long int i = array_size-1; i > 0; i--)
    {
        // move the current root to the end
        std::swap(array[0], array[i]);
        
        // call max heapify on the reduced heap
        Heapify(array, i, 0);
    }
}


// print the sorted structure
void Print(std::vector<int> &array)
{
    std::vector<int>::iterator itr;
    
    std::cout << "[    ";
    for(itr = array.begin(); itr < array.end(); itr++)
        std::cout << *itr << "    ";
    std::cout << "]\n";
    
}


int main(int argc, const char * argv[]) 
{
    std::vector<int> array10 = {11, 8, 4, 0, 0, 33, 45, -25, 20, 88};
    std::vector<int> array20 = {89, 19, 73, -86, -19, -19, -88, -33, 75, 67, -22, 86, -64, -34, 57, 0, 65, 29, 40, -79};
    std::vector<int> array50 = {-9, -470, -229, 67, -213, -249, 169, 324, 331, 64, 195, -344, -384, 461, 348, -438, -223, 424, 359, -93, -121, -193, -487, 180, -383, 235, 141, 185, -223, -222, -66, -431, 57, -211, 321, 277, 344, -329, 67, -345, -253, -118, -433, 408, 233, 48, 57, 187, -63, 217};
    std::vector<int> array100 = {-81, 262, 226, -112, -290, -192, 409, -204, 12, 10, -367, -312, -283, -28, -421, -69, -98, -397, -212, 286, 4, 155, -189, 232, -18, 293, -395, -211, 172, -82, -39, 321, -174, 149, 361, -193, -67, 497, -483, -277, -486, 364, -128, 265, -80, -282, -406, 188, 2, 323, 446, 452, 459, 496, -297, -463, 297, -264, 421, 411, 293, 444, 286, 360, -294, 164, 494, 427, 376, 212, 237, 206, 66, 337, 127, -399, -446, 18, -280, 143, 135, 452, -405, -410, 186, 380, 4, -198, -259, 236, 481, -83, 245, 473, 13, 85, -48, -498, 42, -114};
    std::vector<int> array250 = {129, 404, -85, -652, -991, -820, -995, 15, 437, -589, 147, -674, -177, 110, -794, 254, 185, -220, -722, 5, 617, -559, 341, -293, 798, -225, -192, 724, 667, -284, -809, 575, -489, 696, -27, 409, 743, -189, -43, 410, 92, 662, -133, -973, -627, -419, -776, 437, -748, -861, 973, -142, -616, 695, 7, -75, 766, 164, 398, 524, -109, 950, -521, -295, -88, 366, 41, 260, 201, -303, -245, 471, -906, -120, -160, -919, 291, 660, -87, 280, 785, -982, -933, 464, -937, 403, 1, -593, 122, 900, 442, -476, 677, -898, 518, -752, 262, -248, -894, 730, -173, 994, 323, -878, 133, -698, 498, 113, -62, -126, -310, 505, 779, -24, -196, -35, 915, -131, -654, -428, -570, -134, 730, 414, -880, 957, 822, 901, -843, 400, -159, -121, -531, -143, -296, 827, -91, 976, 914, 401, 283, 11, -805, -240, 972, -537, 262, -605, -778, -581, 118, 921, 534, -874, -171, -915, -699, -187, 674, 394, 773, -977, 234, -882, 612, -878, 869, -652, -71, 208, -313, -703, -452, -927, 325, -494, -55, -777, 975, -212, 855, -430, 887, 24, 52, -980, 972, 254, 651, -332, 910, -487, -314, 477, 370, 862, -32, 305, -45, 377, 804, 849, 670, -778, -611, 333, -172, -464, 197, -865, -231, 565, 533, 484, 322, 342, -556, 413, 26, -527, -458, 868, 371, 864, -689, -777, -999, -122, -842, -816, 865, 720, -173, -509, 517, -702, 245, -228, -443, 621, -426, 630, 522, -299, -624, 838, -899, 458, -284, -109};
    std::vector<int> array500 = {641, 1769, -1177, -1810, 954, 2447, 1764, 1256, 1927, 1363, -496, 1268, 2042, 1081, 784, 1104, 1212, 299, 2216, -871, -764, -1759, 1674, 2373, -1416, 1752, -790, -558, -925, -2271, -839, 1238, 1590, 2372, 1395, -26, -1349, -926, 2249, -144, 60, 2028, -274, 1445, -252, -1122, -1410, -1960, -2175, 1858, 2065, -2096, 1281, 12, 1968, 823, -139, 1873, -158, -1787, -832, -403, 2187, -2335, -1439, -1710, -882, 800, 122, 2286, -307, -913, -512, 1856, 1184, 769, -275, 774, 1220, -818, -418, 2103, 2058, -1275, 678, -1432, -2234, 2219, -2311, -1684, -1637, -101, 2046, -2095, -2205, -973, 1075, -905, 745, -1802, 521, 1187, -1166, 161, 244, -2315, -1352, 844, -1444, 1409, 2425, -178, -2296, 2322, -1053, 83, 1674, -1837, -2333, 826, 1478, -110, 1296, -1958, -2135, 846, 2185, -281, -1439, 1061, -1309, 927, -1924, -1705, -1621, 1651, 1684, 1203, 1316, 781, 2295, 2038, 2076, 69, -2110, -2112, -2331, 53, 1409, 1095, 2352, -1687, -1210, -924, -1000, 932, 2276, -510, -1531, 71, 324, -2438, -394, -679, -2160, -2078, 783, 404, -1371, -1782, 1706, -162, -449, 481, -845, 2495, -1503, 2445, 1972, -2464, -2016, -1059, 2234, -1134, 1020, -1453, 1279, -1777, -2162, 82, -129, 1929, -1585, -2297, -1111, -1171, -1767, -1957, 353, 1243, 2313, 672, 890, -98, -59, 1797, 1230, 1403, -1268, -1593, 944, -2386, 1478, 1159, 337, -2445, 32, 40, 242, 1555, 609, 1700, 135, 1857, 531, -1944, 1946, 346, 1501, 239, -1662, 1790, 318, -800, -2271, -1984, 1895, -1442, 711, 1568, 2295, -378, 1816, 1424, -1026, 1899, 281, 2348, -702, -390, 377, 507, -2473, -1725, 28, -710, -578, -1506, -1765, -2444, -901, -374, 1836, -906, 2322, 520, 228, -404, -814, -4, 1491, 1045, 1778, 180, 1089, 1171, -2113, 1064, 1070, 1306, -1175, 940, -300, -2190, -1936, 529, 1698, -707, 301, 738, -1862, 2405, -1228, -2080, 1506, -509, -717, -1473, -770, 510, -1308, 2153, -1296, -1954, 1261, 1497, 251, 813, 1780, -2292, -2154, 1095, 866, -1759, -1473, 551, -499, 1802, 85, 646, 766, -913, -2140, -1324, -480, 598, -97, -1121, -206, 283, -1177, 1191, -1646, -2437, 958, 1021, -1309, 1110, 816, -2424, -2421, 84, -2397, 739, 603, -474, 23, -133, -735, -661, -1015, 2222, 296, 1694, 1554, -2423, 1220, 1470, -1210, -583, -1560, 780, 59, -2286, 1764, -636, 1546, 2122, -1520, 1957, 517, 148, 1739, 2256, 333, 2313, 559, -204, 738, 1257, 1180, 759, -705, -109, 233, -920, -638, 593, 2333, 894, -2335, 756, 2239, 1629, -1856, -180, 65, 209, 157, 752, -230, -396, -1353, 145, 1470, -1090, 2007, 1825, 1260, -1268, -50, -1892, -1311, -1584, 1342, 1102, -247, -2130, -1405, -1324, -109, -2381, -2184, -1265, -440, 380, 720, 1485, 1463, -1865, -781, 1166, 1846, -1167, -2408, 578, 896, -1741, -3, 979, 729, -98, 983, 1884, 1526, 1021, 756, -849, -2265, -414, 2233, 1706, -843, -1984, -2, 1405, 2110, -1915, -1379, -233, 2114, -558, 817, 31, 1603, -1211, -2391, 865, 1702, -2285, -2197, 477, 1876, 408, -89, -83, 660, 488, -2203, -587, 818, 596, -1345, 1750, 1085, 973, -606, -495, 2476, 1234, 1681, -1654, -522, 2142, -1560, 1371, 1323, 936, 1165, 1612};
    std::vector<int> array1000 = {1215, 2010, 1489, -1061, 2192, 1534, 1798, -631, 2207, 1428, -925, -1785, -1004, -2498, 2451, 217, -1236, -1552, -1993, 429, 184, 1391, -1798, 1161, 2096, -2130, -366, -1416, 121, -2306, 87, -1086, 1611, 868, -2439, 1558, 1233, 1495, -946, -2060, 1232, -1583, 1223, 2239, 2421, -55, 2330, 1069, 2493, 2151, 756, -1101, -1457, 1504, -2240, -2110, 1567, 1170, -946, -1765, 2257, 1282, 1049, 988, 1133, -1237, 2476, -1751, -872, 1321, -1731, -1329, 2062, 230, -2397, -1302, -1590, 2365, -1966, 2151, 542, -474, 1925, 1734, -2375, 648, 2071, 1699, 895, 1297, 266, -2399, -1831, 1530, -1056, 0, -2176, 807, -1605, 1549, -2332, 2253, -1059, -1405, -321, -1023, -397, 766, -641, 2188, -1120, -753, 1352, 2091, -857, 2056, 1613, 56, 1934, -434, -1524, 1295, -2159, -1893, 2058, -2456, 1085, -772, 2365, -1101, 1240, 2357, 2236, -464, -1780, 1058, -463, 900, 422, 9, -681, -2296, 838, -927, 1492, -456, -1660, 1444, 1391, 926, -265, 103, -2419, 1833, 909, -420, 1218, 186, 654, -2213, -943, 1290, 337, 499, 622, 2122, -1609, 2119, 2018, 1076, 347, 575, 191, 487, -582, 391, -1936, 1184, -268, -1300, -347, 2150, -1775, -2412, -893, -2067, 1305, 1945, -168, -764, -1752, 1123, 592, 528, 264, 88, -146, -434, -663, 317, 692, -1100, 1235, 852, 1493, 173, -1285, -1787, 2364, 252, 596, 79, -1854, -830, -1087, 1748, 1058, -1411, -189, 2485, -188, -1321, 666, 2113, -1885, 395, -2307, -2111, 1782, 1006, -1801, 507, -1634, -1941, 762, -1042, 2347, -365, -2134, 2449, -901, -1315, -1531, -2193, 830, 2339, -2187, 154, -1392, -894, 325, -84, -1245, -1881, 567, 2478, 223, -1668, -1155, 2289, -971, 1294, 2159, -2044, 2006, -2348, -1392, 35, -110, -1809, -2451, -2036, 1879, 2067, -152, 1462, 326, 640, 1518, 759, -2008, -920, -752, -383, -143, -1989, -1130, -2476, 372, -471, 1039, 865, -2034, -2232, 1162, -741, -808, -1855, 1106, -366, 1235, 2202, 1815, -510, 869, -2386, -534, 893, 604, 785, 2178, -2396, 2299, 758, 1400, -1103, 1024, -776, 2105, 882, -1852, 1898, 1253, 1989, 478, 254, 1458, 2375, -354, -2015, 2485, -1657, 2190, -1955, 229, -1282, -241, 956, 349, -711, 626, -1934, -1982, -1080, -913, -1446, 864, -1392, 1903, 16, 1379, 207, 108, -1609, 1511, 1156, 2205, 1101, 2389, -1709, 265, -28, 853, -1452, -468, -924, -2289, -1232, 176, 1056, -675, 1871, -665, 1917, 1456, 1602, 2115, 1937, 282, 1851, -124, 127, -347, 1893, 1156, 776, 1434, -1377, 33, -1169, -2293, 2162, -2497, -565, 765, 291, 2093, 2145, -1792, 79, -2203, 1676, 531, -816, -1830, 1459, -1413, -2458, -617, -1781, -2335, -1610, -1124, 1853, -604, -1889, 39, -264, -2353, 190, -962, 1039, 1130, 1197, -2211, 2339, -1178, -2163, 1897, -1812, -1464, 23, 1029, 1551, -1439, -176, 494, 628, -88, 558, 1323, -2064, 1808, 1707, -785, 1232, -486, 932, -1026, -274, -459, -757, 2047, 2456, -296, 1594, 484, -1135, 916, 276, 1356, -1959, -2210, -493, -1671, 2277, -907, -1598, -1312, -1990, -1710, -2414, -350, 1329, 2376, -1978, -841, 2434, -195, 1968, 1631, -603, -36, -2442, -887, -2401, 797, 1555, -1701, 1199, 933, 948, -947, -1980, 1363, -150, 1172, -1333, 427, -1490, 2444, 772, 1529, 4, -878, 1776, 1381, 1091, 632, 1534, -1470, -443, 1461, -1122, -2364, -2181, -14, 255, 1808, -305, 1880, -702, -430, -1740, 452, 1287, -664, 397, 1935, -2304, -1502, -555, -659, -683, 1167, -1923, 2314, 1836, -2402, -2174, 1807, -2009, -2341, -916, 17, -156, -802, -718, -2467, 616, -846, 747, 951, 1867, 502, -120, 2396, -532, 1707, 1237, -2252, 1877, -406, -944, 293, 96, -828, -102, 2386, 2328, 885, -2254, 662, -2167, -1946, -267, 26, -1980, -2074, 2247, 2464, 1092, -659, 447, 563, -16, 1005, 1301, -788, 1769, 2287, 724, -379, 1776, 1782, 1724, 1827, 503, -1294, 1706, 188, -534, -678, -2448, -450, -2376, -1592, -203, 1065, 1631, -821, 1854, -493, 252, 1603, 846, 1208, 1312, -1021, 2224, 100, -1793, 1849, 2448, -2341, 318, -288, 1505, -2019, 25, -2467, 2026, -1627, 1258, 924, -1257, -1215, 2008, 1311, -572, 368, -2290, 2114, 1795, 1813, 2328, 1355, 1855, 803, 1912, 1275, -1537, 1450, -867, -2087, 1020, -1418, 948, 1397, -414, 1119, -1681, 684, -507, -1608, -688, -1803, -458, 645, 878, -721, 1890, 756, -2104, 327, 1660, -2158, -2291, 363, 1448, 1595, -369, 195, 674, 1829, -662, 2476, -404, -1045, 2404, -157, 965, -1071, 2178, -1513, -1644, -501, 208, 2473, -1433, 2331, 2413, 772, 18, 2180, 1310, -2417, -2140, -1275, 1947, -1402, -1711, -384, -444, -1746, -797, 2248, 2051, 88, -1795, 2145, -922, 564, 1519, -1566, 1735, 2472, 1088, -1279, 1603, -1919, -1670, 1380, 2367, 445, 793, 2371, 1224, -2435, 2168, -792, 2242, 1928, 2057, -479, 669, -2035, -1871, -1273, 1733, 110, 1324, 441, -1714, -5, -1999, 1469, -1537, -1770, 1398, 1744, 2386, -1550, 2418, 804, -1904, -1056, -1929, -934, -1205, 1343, 517, 1072, 970, 1927, 655, -94, 934, -593, -663, 478, 451, -290, 88, 1068, 556, -1815, -748, -2461, 1111, -212, 2161, -72, -435, 665, -16, -741, 2465, 1468, -830, -1820, 2178, 1696, 1767, 1804, -2300, -1419, -529, 1351, 2234, -1047, 1027, 2444, -1879, -1112, -1670, -2320, -1701, -917, -829, 116, 1601, 991, 1536, 1783, -515, 2328, 1631, 2158, -723, -591, 440, 3, 535, 807, -1562, 637, 884, -500, -879, 2478, 1142, 798, -1901, 2465, 1154, -1227, 2232, -2342, 1577, -202, 546, -503, 417, -1614, 1279, 679, -1334, -230, -1220, 2234, -625, -1796, 32, -579, 389, -1471, -12, -1193, 390, -1670, 1815, -2278, 2079, 1895, -138, -1357, 946, 711, -1927, 1581, 1190, 2197, -1849, -82, 1932, 2036, 349, 1243, -2348, 847, 947, 1706, -1488, 1393, -1381, -2256, -420, -1593, -2167, -936, 1545, 968, -1001, 2311, -2116, -662, -178, 2053, 2330, 1391, -519, 1152, 1219, -1161, -2370, 1037, -1621, -1157, -2081, 1058, -79, -1255, -945, 226, -1465, 1555, -400, -996, -1945, 3, -2158, 435, -35, -397, 2463, -13, -2410, -2273, -1392, 869, -820, 2107, -332, 1042, 1869, -1292, 908, -1038, -1864, 1859, 793, 672, -639, -1663, -963, 272, -1874, 2313, -1680, 2437, -1118, -1736, -367, 764, -609, -558, 2418, -2381, 654, -2191, -1228, -2277, -659, 351, -231, 877, 2032, 564, -2057, -1491, -18, -555, -871, 1124, -409, -2080, 182, -337, -1509, -1032, -1574, 2477, -181, -257, 1503, -1560, -348, 2054, 1232};
    std::vector<int> array2000 = {-594, -757, -237, -1949, -2413, 2057, 456, 82, -130, -1942, 438, -2132, 1147, 1610, -2022, -1487, -2234, -747, -776, -891, -2030, 2172, 195, 479, 771, -1067, 507, -1923, 547, -339, -1913, -2228, -369, -1645, -382, 582, 676, 486, -871, -32, 26, 1836, 1728, -501, -481, 899, -1372, -1245, 581, 2377, 1281, 976, 1592, 309, 1270, -1250, -2449, -1763, 332, -2207, 2165, 297, 190, -1305, 1257, 2365, 1414, -498, 1090, -902, -2398, 1188, -1051, 1253, 718, 544, 120, -880, -2176, 503, -1678, -460, 315, 98, -2020, 2118, 913, 2493, -8, 1343, -2249, 1668, 744, -619, 444, 2230, -627, -2410, 1097, 593, 142, 1861, -1191, -994, -2471, 1039, 897, 126, 2482, 149, 972, 2303, 1081, -1107, 209, 1264, -1480, -2167, -191, -1335, 1248, 221, -85, -794, -537, -254, 2286, 943, 142, -912, 2334, -903, -113, -1947, 294, 1009, 2071, -771, 2149, -1035, -972, 896, -370, -502, 448, -444, 1226, -370, -1866, -2488, -2077, -1200, -100, 2113, 383, -1089, 2226, -1469, 1153, 769, -1776, -1768, 1814, -249, 1227, -1809, -2142, -416, 838, 2225, 1791, -1749, 814, 2178, -1709, 2430, 552, -1836, 52, -2380, -67, -1954, 520, 134, 1131, 1472, 1548, -244, -733, 98, 856, 2096, -1100, 1698, 1685, 2105, -1128, -1722, -1897, -1195, -1951, 2290, 432, -243, 1038, 1460, -2130, -274, -1765, 1104, -1555, -376, -28, 2449, -1379, -222, 130, 2309, 398, -1573, -2348, 1195, 303, -1953, 157, -2337, 1431, 591, 2158, 513, 1028, 816, -1952, 1662, 1224, -1431, -1692, 1646, -984, -1701, 476, 1458, 1648, -325, -421, 443, 266, 1544, -850, 1444, -471, 111, 1838, 1139, -1266, -1222, -2056, -365, -768, -1695, 586, 995, -2105, 1760, 821, -192, -1397, -1054, -102, -1837, 1023, 1373, -2120, 223, -2487, -1253, -2032, -942, 1726, 826, 1958, -1142, -1202, 1968, -432, -2440, -1570, 1064, 1156, 2046, -1792, 1315, 256, -919, 1332, -2315, 533, -650, 196, 1529, -463, -208, 563, -2272, 2331, -2112, 835, 46, -529, -2453, -1801, 645, 2325, 2232, 211, 400, 1403, 1296, 423, 1484, 255, -2440, 2284, -680, 193, -1738, -85, 872, 408, 1923, 373, 2349, 131, -1984, 64, -851, -581, -30, 255, 1673, -1630, -1733, -2200, 503, -2143, -1283, -1950, 1980, 2365, 1558, 1746, -1180, 2294, -4, 1891, 846, -2087, -472, 2007, 1673, 1152, 1334, -106, -1892, 1639, -627, -2445, -1154, -1458, -2355, 1960, 871, 1255, -543, 894, -1048, -818, 1864, 1471, 1088, 1113, -1735, 1961, 1113, 2117, -1519, 1766, 1023, -192, -1058, 2183, -1934, -1002, 618, -1977, -626, -2479, -214, -2096, -687, -2392, -1175, -220, -1550, 1924, 2141, 470, 197, -1040, 1084, -864, -1918, 1221, -337, -1565, 395, 320, -452, 760, -1113, 1377, 1529, 701, 2051, -1588, 1937, -397, -466, 886, -1496, -2001, 1381, -745, -45, -1639, -2395, -859, 1690, 1503, -672, -1307, 2409, -1037, -1200, 1255, 345, 576, -759, -1958, -2186, -1643, -2318, 1741, 501, -1378, -16, 709, 270, 359, 2375, 1739, 1190, 688, -1139, 2345, 1644, 1143, -1720, 210, -1447, 1884, 1952, 1689, 1965, -2005, 1326, 1604, 1428, 1115, -1682, 374, -1599, -1838, 1975, -1410, -1449, 2274, -2299, 2418, 7, 2216, -28, 85, -1327, -60, -123, 856, 1498, 617, -2491, 404, 1694, -367, 203, -1829, -1185, -233, 1904, -1888, -2277, 320, -1843, -1521, -1, -519, -1744, -228, -1916, -2479, -1205, 1096, 33, -1248, -451, 2217, -228, 268, 1607, 1115, 527, -1603, -24, 2134, -213, 483, 1985, -125, -1203, 1228, 336, -1102, -407, 1519, 833, -1890, 1947, -1076, 1373, 2423, -1759, -726, 2016, 821, 269, 181, 253, -142, -949, -516, -610, 1399, 71, 1036, 793, 630, -2454, 1799, 1127, 1571, 1088, -934, 1502, -2123, 1627, -2384, -1703, -1642, 1021, 1008, -26, -1344, 2063, 2212, -2440, 996, 561, 2246, 1984, 1791, -924, -1110, -1537, -132, 1326, -245, 1345, -633, 1532, -2009, -536, -1561, 857, -632, 1416, -1325, 1519, -794, 1124, 1923, -1181, 2122, 815, -1675, 1087, 176, 1817, 1283, -1828, -2378, -1312, 551, 455, -888, 2214, -1714, 1369, 786, -767, -1215, 2403, 419, 487, -1170, 1060, -484, 43, 1999, 2354, 253, 558, 1293, 392, 290, -92, -749, 2328, 1908, 1330, 1064, -326, -2239, -357, 479, 1521, -900, -1584, 1048, -877, -1957, 1984, -1939, -467, 2420, 1838, -1471, 35, 1761, 509, 1683, -652, -2040, 479, 2275, 2227, -1655, -1285, 1398, -1050, 377, 114, 2173, -1991, 1811, 1803, 1172, 145, -2069, -1496, 1504, -2036, -363, 1261, 24, -1246, 1447, 2083, 1783, 2044, -301, 2176, 700, -1839, 1678, -2276, 525, -857, 1644, -856, 1622, -250, 45, 839, 1863, -1477, -845, 332, -429, -1217, 335, 199, -614, -2269, 637, 1270, -1315, 764, -1542, -971, 1013, -2472, -955, 132, -1117, 1218, -16, -2154, -1220, 1704, 132, -376, -1378, 184, 128, 1495, -2146, -593, 2361, -2465, -1765, 1674, 898, 692, 2119, -117, -802, 1320, -39, 1843, 196, -260, 754, -1313, -1764, -1325, 500, -150, -2321, -1404, -663, -446, 322, 93, -2419, -326, -2141, -1676, 43, -1268, -987, -2499, 1966, 221, 225, 1075, -76, -209, -543, 1078, -232, 1177, 213, 1479, 755, 2080, -751, 2024, -844, -455, 958, -2344, 1411, -1871, 526, -138, -771, 179, 2155, -1999, 2260, 1208, -357, -1385, -57, -232, -834, 605, 2142, -2403, 556, 1433, -2236, -1147, -48, 1640, 1113, 1826, 1082, 1578, 848, 670, -2390, 1612, 1825, 2124, -575, -1199, 246, -2212, 684, 1782, 1892, -812, 970, 2274, -741, 1764, -347, -428, 2112, -336, 843, -1852, -207, 852, -1783, -1345, -2095, 1474, 422, -509, -1577, 1432, -159, -1113, 2079, 2003, -2121, -1245, -1809, 82, -1055, -588, 872, 228, 38, 1930, 1586, 1156, 2246, -1152, -61, -1747, -1061, -1647, -342, 634, 940, 966, -360, 967, 581, -1641, 1713, -1237, 1211, 383, 484, 271, -276, 2242, 656, -385, -1885, -2184, -756, -1235, 1590, -432, 1648, 1511, 170, 2134, -2224, 1274, -33, 250, -1040, -2346, -139, 2050, -2262, 1474, -879, -2490, -248, -2235, -1261, -617, 259, -588, -433, 385, -2199, -114, 162, 158, 2278, -1915, 1466, 703, -1779, -1245, -1000, -1330, -2178, -1252, -2152, 1335, 243, -779, -2499, -878, -1757, -1283, -900, 469, -665, -1945, -1122, -1041, 1788, 1850, -1719, 1962, -1507, -913, -2030, 445, 1110, 2379, 2102, -2041, 1809, -830, -594, 2257, 1607, 235, 2471, 1862, -1735, 1967, -897, -236, -1162, -894, -1679, -1312, 554, 2299, -291, 1728, -138, -669, 1484, -1664, 1670, -285, 182, -2429, -2332, -1871, -2293, -2034, 2345, 1775, 2068, 787, -1425, 964, 717, -611, -1791, -172, -2087, -1479, -1022, -952, -891, -1974, -1110, -809, -2276, -1005, 427, 1432, -2231, 303, -2416, 1855, -753, 2334, 1666, -191, -2218, 911, 211, -193, 12, -1086, -2402, -813, -376, -1533, 1696, 2265, -1382, -174, -2243, -442, -1120, -712, -1275, 1430, 1642, -1682, 314, -260, 1375, -1118, -1492, -2174, -1556, 2429, -2069, 460, -1302, 1232, 1654, 1519, 1174, 1163, -2203, -1950, 218, 1904, -883, 1738, -1430, -1726, -1518, -2307, 1301, 186, -2424, -2156, -2050, -2238, -189, -261, 2316, -1745, 1719, -172, -1054, -1831, -1424, 466, 796, 2138, -1659, 25, 2495, 1781, -1690, 1038, -2074, -1354, -178, -248, 294, 2270, -477, -1797, -1102, -2140, -622, -1670, -1738, -2226, 1707, -1879, 440, 152, 2052, 645, 663, 996, -1173, -1540, -1224, -1169, 1633, 470, -204, -2352, -790, -401, 1695, -1373, -1099, -1133, -2188, 2113, 2031, 1292, 59, -790, -1385, -2160, -1788, 450, -197, -1272, -696, -1241, 777, -1516, -776, -1648, -1400, -1696, 83, 2435, 1345, 795, -2, 2256, 397, 994, -1139, -1652, -6, -1750, -258, -316, 112, -2049, -1556, -748, -842, 545, -1724, 2154, -882, 253, -2147, 1855, -1545, -2000, -1681, 2481, -1197, 1092, 244, -322, -1794, -190, 1010, 1188, 1122, -2093, -1225, 1445, 1504, -676, 2315, 820, -1809, 2275, 1101, -1091, -689, 933, 1339, 920, -1523, -3, -931, -491, 759, 588, -2000, -2292, 2385, -1174, -247, -852, -2151, 2436, -1079, 944, -1671, -619, -54, 2376, 420, 2057, 1757, -2018, 1417, 599, 2050, 267, -1358, -1916, -2032, -2095, -2433, 1063, -1474, -1266, -1928, 472, -509, -1096, 1052, -879, 1032, 721, 1812, 1796, 322, 564, -1163, 1101, 2379, -1303, -86, -669, -246, 1259, -502, -1320, 99, -1376, -993, -842, -2149, -325, -1978, 2428, 225, -1425, -420, -442, 558, 259, -226, -736, -1736, -2226, 225, 1606, -1324, 2312, 1656, -1804, -1889, -2246, 760, -1541, -1744, -1334, 271, -2334, -366, -1218, 1353, -810, -790, -342, -1227, 755, 2125, -869, 485, -243, -481, -1056, -1766, 596, 551, 26, 906, 674, 1546, 2330, 1304, 1983, 217, 684, -72, 106, 236, -750, -2258, -16, -1724, -954, 2112, -1249, 476, 193, 469, -736, -1072, -126, -326, -1157, 1762, 2066, 1314, -1356, 256, -1223, -1372, 500, 2415, 1575, -1892, 679, -247, 1503, 1219, 443, 1559, -1829, 984, 708, 1569, 915, -331, -2223, -725, 155, -1686, 2055, 1037, 1155, 2169, -255, -1008, 2013, 1832, 2328, 2140, 2105, 657, 2170, -142, 1831, -139, -976, 1062, 2311, -2494, 2169, 1912, -462, -591, -109, 1722, -699, 99, 387, 942, -2300, 1867, -492, -696, -540, -2350, 1486, 1776, -186, -1373, 926, 1416, -2214, -660, 772, -2139, 724, 1094, 2486, 867, -1596, -153, -79, -1523, 2296, 970, 2257, -1463, 286, -2167, 2182, 148, 1025, 1888, 1249, -1078, -1783, 173, -1525, 2157, 794, -781, 2194, -1698, -402, 1715, 1484, -1622, -2122, 1045, -408, 607, 199, -2472, -1183, -846, -777, -1220, -2147, -2482, -163, -753, 474, 1082, 1812, 512, -1028, 2087, 1945, 1515, 276, -1304, 2434, -1372, 1220, -1974, -1091, 2310, -423, 2210, -738, -1104, 90, 426, -2138, -1760, -323, 198, 600, 1581, 1950, -988, -2155, 1305, 235, 1024, -615, -1247, 1076, 442, -954, 1043, 832, 439, -2475, -2145, 2456, -2207, 2180, 189, 1729, -126, -1250, -156, 278, -906, -904, 2400, 1996, -1182, 1755, 511, 1055, -413, -1619, -1291, -1906, -2384, 303, -2205, 671, -1000, -1227, -1108, 317, 1866, -1460, 1703, 388, 1986, 167, 2278, -1658, 1435, -913, 1165, 762, 1961, 2279, -1135, -46, 139, -1841, -51, 2243, 161, -2111, 1644, 2349, 1238, -767, 2226, 352, 2500, -31, -396, -1234, -322, 679, -1561, -595, 71, 2494, -1810, 138, -610, 341, -400, -205, 1340, 481, -1758, 874, -1722, 4, 1297, 749, 1544, 1288, -1577, -1162, -2164, -1594, -209, -1173, 2131, -1676, 465, -2002, 1304, 730, 2346, -1789, -1545, -1272, -60, -595, -613, 719, -2268, 1960, -1866, 1408, 2062, 571, 1650, -2415, -2007, 101, 2143, -633, -1755, 1884, -1097, 430, -43, -451, 2453, 1052, -1220, 1739, 1697, -1974, 1027, 1804, 1874, -1752, 1301, 1290, -1889, -2307, 1531, 2227, -348, 388, -912, 988, -2257, 1484, 865, 471, -137, 1589, -501, 2291, -2367, -2211, -805, 2443, -1838, -971, -193, -122, 1808, 2018, -173, -602, 840, 1336, 2275, 741, -2358, 32, 552, 661, -1892, 916, 2112, -2149, 2152, -1988, -1677, 1347, 1235, -25, 1461, -1065, 2084, 1509, 689, -766, -1230, -1043, 1743, -2272, 2259, -2263, -362, -184, 997, -502, 1517, -707, -642, 2350, 2341, 2434, 553, 2234, 607, -2257, -1979, 519, -2169, 1321, -2457, 503, 29, -63, -1508, 1285, -356, 1082, -2400, 112, 770, -155, 393, 1054, 1699, 1364, 891, 1241, 830, -238, 129, 2301, -113, -2147, -998, 1865, 252, 839, 1799, 1537, -391, 448, -752, 571, 482, -1831, 712, 1563, -2177, -957, 373, -2128, -858, 489, 1186, -2415, -1228, 87, -2260, 1051, -2121, 783, 2317, 1618, 787, -1248, -114, 2300, -1238, 2195, -2039, 991, 562, -1780, -1399, -1773, -1287, 1434, -2413, -2113, -356, -187, 1195, -1139, -820, 2287, 1964, -1690, 1432, 1470, -293, -38, -927, -2138, 1059, -2076, 267, 2340, 634, -432, 1720, 1805, -2110, -1376, -97, -1646, 1722, 419, -1653, 2115, -505, 187, 2179, 375, -1819, -2365, 955, -2462, -2120, -2088, 1188, -170, -2412, -1634, -1701, 1674, 1260, 1408, -1939, 261, -443, -560, 1501, 572, 1926, 1919, -1192, 2411, -1109, 671, -127, -1552, -2410, -566, 2138, -2096, -145, 178, -1822, 1197, -2173, -1914, 1186, 2261, -571, 2347, 1370, 1000, 1106, -1096, -1858, 1336, 2017, 1690, -1987, 1356, 971, 1427, 2251, 74, 541, -678, 2421, -1169, 1385, -697, 2186, -247, 1337, 2088, -548, 29, -1981, 1096, 1331, 74, 66, -1550, 275, 822, -2087, -2179, -607, 764, -664, -1098, -733, -1491, -504, 1496, -595, -2181, 1485, 787, 1080, -2141, 1755, 1916, -365, -1854, -1188, 481, 380, -22, -1332, 2070, -1236, -1490, 460, -820, -1929, -2238, 276, -2129, -495, 756, -610, 2100, 776, -1365, -1952, -1194, 1155, -991, -14, -2364, 1835, 201, 590, 1870, -898, -2472, 1604, 1988, 302, 1077, -597, 549, -1405, 2036, 898, 2258, -2409, -1618, -847, -188, -1160, 13, 1673, -926, -2343, 1516, 2166, 1281, 223, 938, 865, 135, 1330, -2211, -2134, -1960, -245, 2293, -2475, -124, -2182, -629, -2170, 565, 1612, -146, -932, 192, -1485, 2456, 1443, -228};
    
    /* heap sort - 10 nodes computation */
    auto start_time_10 = std::chrono::system_clock::now();
    time_t start_time_A = std::chrono::system_clock::to_time_t(start_time_10);
    std::cout << "Started computation at -> " << std::ctime(&start_time_A) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array10);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array10);
    Print(array10);
    
    auto end_time_10 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_10 = end_time_10 - start_time_10;
    time_t end_time_A = std::chrono::system_clock::to_time_t(end_time_10);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_A) << "elapsed time " << elapsed_seconds_10.count() << "s" << std::endl << std::endl;
    
    
    
    /* heap sort - 20 nodes computation */
    auto start_time_20 = std::chrono::system_clock::now();
    time_t start_time_B = std::chrono::system_clock::to_time_t(start_time_20);
    std::cout << "Started computation at -> " << std::ctime(&start_time_B) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array20);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array20);
    Print(array20);
    
    auto end_time_20 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_20 = end_time_20 - start_time_20;
    time_t end_time_B = std::chrono::system_clock::to_time_t(end_time_20);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_B) << "elapsed time " << elapsed_seconds_20.count() << "s" << std::endl << std::endl;
    
    
    
    /* heap sort - 50 nodes computation */
    auto start_time_50 = std::chrono::system_clock::now();
    time_t start_time_C = std::chrono::system_clock::to_time_t(start_time_50);
    std::cout << "Started computation at -> " << std::ctime(&start_time_C) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array50);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array50);
    Print(array50);
    
    auto end_time_50 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_50 = end_time_50 - start_time_50;
    time_t end_time_C = std::chrono::system_clock::to_time_t(end_time_50);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_C) << "elapsed time " << elapsed_seconds_50.count() << "s" << std::endl << std::endl;
    
    
    
    /* heap sort - 100 nodes computation */
    auto start_time_100 = std::chrono::system_clock::now();
    time_t start_time_D = std::chrono::system_clock::to_time_t(start_time_100);
    std::cout << "Started computation at -> " << std::ctime(&start_time_D) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array100);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array100);
    Print(array100);
    
    auto end_time_100 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_100 = end_time_100 - start_time_100;
    time_t end_time_D = std::chrono::system_clock::to_time_t(end_time_100);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_D) << "elapsed time " << elapsed_seconds_100.count() << "s" << std::endl << std::endl;
    
    
    
    /* heap sort - 250 nodes computation */
    auto start_time_250 = std::chrono::system_clock::now();
    time_t start_time_E = std::chrono::system_clock::to_time_t(start_time_250);
    std::cout << "Started computation at -> " << std::ctime(&start_time_E) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array250);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array250);
    Print(array250);
    
    auto end_time_250 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_250 = end_time_250 - start_time_250;
    time_t end_time_E = std::chrono::system_clock::to_time_t(end_time_250);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_E) << "elapsed time " << elapsed_seconds_250.count() << "s" << std::endl << std::endl;
    
    
    
    /* heap sort - 500 nodes computation */
    auto start_time_500 = std::chrono::system_clock::now();
    time_t start_time_F = std::chrono::system_clock::to_time_t(start_time_500);
    std::cout << "Started computation at -> " << std::ctime(&start_time_F) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array500);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array500);
    Print(array500);
    
    auto end_time_500 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_500 = end_time_500 - start_time_500;
    time_t end_time_F = std::chrono::system_clock::to_time_t(end_time_500);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_F) << "elapsed time " << elapsed_seconds_500.count() << "s" << std::endl << std::endl;
    
    
    
    /* heap sort - 1000 nodes computation */
    auto start_time_1000 = std::chrono::system_clock::now();
    time_t start_time_G = std::chrono::system_clock::to_time_t(start_time_1000);
    std::cout << "Started computation at -> " << std::ctime(&start_time_G) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array1000);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array1000);
    Print(array1000);
    
    auto end_time_1000 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_1000 = end_time_1000 - start_time_1000;
    time_t end_time_G = std::chrono::system_clock::to_time_t(end_time_1000);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_G) << "elapsed time " << elapsed_seconds_1000.count() << "s" << std::endl << std::endl;
    
    
    
    /* heap sort - 2000 nodes computation */
    auto start_time_2000 = std::chrono::system_clock::now();
    time_t start_time_H = std::chrono::system_clock::to_time_t(start_time_2000);
    std::cout << "Started computation at -> " << std::ctime(&start_time_H) << std::endl;
    
    std::cout << "Unsorted array as follows...\n";
    Print(array2000);
    puts("");
    std::cout << "Sorted array as follows...\n";
    HeapSort(array2000);
    Print(array2000);
    
    auto end_time_2000 = std::chrono::system_clock::now();
    std::chrono::duration<double> elapsed_seconds_2000 = end_time_2000 - start_time_2000;
    time_t end_time_H = std::chrono::system_clock::to_time_t(end_time_2000);
    std::cout << "\nFinished computation at -> " << ctime(&end_time_H) << "elapsed time " << elapsed_seconds_2000.count() << "s" << std::endl << std::endl;
    
    
    
    puts("");
    puts("");
    std::cout << "Summary Section" << std::endl;
    std::cout << "10 nodes elapsed -> " << elapsed_seconds_10.count() << std::endl;
    std::cout << "20 nodes elapsed -> " << elapsed_seconds_20.count() << std::endl;
    std::cout << "50 nodes elapsed -> " << elapsed_seconds_50.count() << std::endl;
    std::cout << "100 nodes elapsed -> " << elapsed_seconds_100.count() << std::endl;
    std::cout << "250 nodes elapsed -> " << elapsed_seconds_250.count() << std::endl;
    std::cout << "500 nodes elapsed -> " << elapsed_seconds_500.count() << std::endl;
    std::cout << "1000 nodes elapsed -> " << elapsed_seconds_1000.count() << std::endl;
    std::cout << "2000 nodes elapsed -> " << elapsed_seconds_2000.count() << std::endl;
    
    puts("");
    return 0;
}
